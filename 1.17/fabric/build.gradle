// VRAM STANDARD GRADLE BUILD FOR FABRIC 1.17
// DO NOT MAKE CHANGES HERE - THEY WILL BE OVERWRITTEN BY AUTOMATED UPDATE

plugins {
	id 'fabric-loom' version '0.10.58'
	id 'eclipse'
	id 'idea'
	id 'maven-publish'
	id 'com.github.breadmoirai.github-release' version '2.2.9'
	id 'org.cadixdev.licenser' version '0.6.1'
	id 'org.ajoberstar.grgit' version '3.1.1'
	id 'com.matthewprenger.cursegradle' version '1.4.0'
	id 'checkstyle'
}

ext.mc_tag = 'mc117'
ext.minecraft_version = '1.17.1'
ext.release_version = '1.17.1'
ext.loader_version = '0.12.5'
ext.fabric_version = '0.42.1+1.17'

sourceCompatibility = JavaVersion.VERSION_16
targetCompatibility = JavaVersion.VERSION_16

repositories {
	mavenLocal()
    jcenter();
    maven {
    	name = "Fabric"
    	url "https://maven.fabricmc.net/"
	}
	maven {
		name = "vram"
		url = "https://maven.vram.io"
	}
}

ext.archivesBaseName = project.mod_name + "-fabric-" + project.mc_tag

if (project.hasProperty('mod_version') && grgit != null) {
	if(grgit.status().isClean()) {
		ext.version = project.getProperty('mod_version') + '.' + grgit.log().size()
	} else {
		ext.version = project.getProperty('mod_version') + '.' + (grgit.log().size() + 1) + '-SNAPSHOT'
	}
} else {
	ext.version = '99.0.0-LOCAL'
}

if (!project.hasProperty('license_file')) {
	ext.license_file = '../HEADER'
}

if (!project.hasProperty('checkstyle')) {
	ext.checkstyle = '../checkstyle.xml'
}

dependencies {
	minecraft "com.mojang:minecraft:${minecraft_version}"
	mappings loom.officialMojangMappings()
}


// Hat tip to JellySquid
configurations {
    modIncludeImplementation
    modImplementation.extendsFrom modIncludeImplementation

    if (!(gradle.startParameter.taskNames.contains("publish") || gradle.startParameter.taskNames.contains("publishToMavenLocal"))) {
    	include.extendsFrom modIncludeImplementation
    }
}

loom {
	mixin.defaultRefmapName = project.mod_name + "-refmap.json"

	if (project.hasProperty('accesswidener')) {
		accessWidenerPath = file(project.getProperty('accesswidener'))
	}
}

tasks.withType(JavaCompile) {
	it.options.encoding = "UTF-8"
	it.options.release = 16
}

processResources {
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand "version": project.version
	}
}

// We define this outside of the eclipse block because eclipse has it's own "project" instance
def eclipseName = project.mod_name + " fabric " + project.minecraft_version

eclipse {
	project {
		name = eclipseName
	}
}

license {
	header rootProject.file(project.license_file)
	include '**/*.java'
}

checkstyle {
	configFile = rootProject.file(project.checkstyle)
	toolVersion = "8.44"
}

jar {
	from "LICENSE"
	manifest
	{
		attributes "Implementation-Title": project.archivesBaseName
		attributes "Implementation-Version": project.version
		attributes "Maven-Artifact": "${group}:${project.archivesBaseName}:${project.version}"
		attributes "Built-On-Minecraft": "${minecraft_version}"
		attributes "Built-On-Java": "${System.getProperty("java.vm.version")} (${System.getProperty("java.vm.vendor")})"
	}
}

// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
// if it is present.
// If you remove this task, sources will not be generated.
task sourcesJar(type: Jar, dependsOn: classes) {
	classifier = "sources"
	from sourceSets.main.allSource
	manifest
	{
		attributes "Implementation-Title": project.archivesBaseName + "-sources"
		attributes "Implementation-Version": project.version
		attributes "Maven-Artifact": "${project.group}:${project.archivesBaseName}:${project.version}:sources"
		attributes "Built-On-Minecraft": "${minecraft_version}"
		attributes "Built-On-Java": "${System.getProperty("java.vm.version")} (${System.getProperty("java.vm.vendor")})"
	}
}

publishing {
	publications {
		mavenJava(MavenPublication) {
			artifactId = project.archivesBaseName;
			artifact(remapJar) {
				builtBy remapJar
			}
			artifact(sourcesJar) {
				classifier = "sources"
				builtBy remapSourcesJar
			}
		}
	}

	repositories {
		mavenLocal()
        maven {
            url = 'sftp://maven.vram.io:22'
            credentials {
            	if (project.hasProperty('maven_user')){
					username = project.getProperty('maven_user')
				}
				if (project.hasProperty('maven_password')){
					password = project.getProperty('maven_password')
				}
            }
        }
	}
}

githubRelease {
	token project.hasProperty("github_releases_token") ? project.github_releases_token : ""
	if(project.hasProperty("github_repository_owner")) {
		owner project.github_repository_owner
	}
	if(project.hasProperty("github_repository")) {
		repo project.github_repository
	}

	tagName project.version
	targetCommitish { org.ajoberstar.grgit.Grgit.open(dir: ".").branch.current().name }
	releaseName project.version

	FilenameFilter filter = { dir, filename -> filename.contains(project.version) && !filename.contains("-dev.jar") }
	releaseAssets = jar.destinationDir.listFiles filter
}

curseforge {
	if(project.hasProperty("curseforge_api_key")) {
		apiKey = project.properties.curseforge_api_key
	}

	if(project.hasProperty("curseforge_id")) {
		project {
			id = project.properties.curseforge_id
			releaseType = project.release_type
			addGameVersion project.release_version
			addGameVersion "Fabric"
			changelog = "A changelog can be found at https://github.com/${github_repository_owner}/${github_repository}/commits"

			mainArtifact(file("${project.buildDir}/libs/${archivesBaseName}-${version}.jar")) {

				if(project.hasProperty("required_dep_slugs") || project.hasProperty("embedded_lib_slugs") || project.hasProperty("optional_dep_slugs") || project.hasProperty("compatible_tool_slugs") || project.hasProperty("incompatible_slugs")) {
					relations {
						if(project.hasProperty("required_dep_slugs")) {
							project.required_dep_slugs.split(", ").each { String slug ->
								requiredDependency slug
							}
						}

						if(project.hasProperty("embedded_lib_slugs")) {
							project.embedded_lib_slugs.split(", ").each { String slug ->
								embeddedLibrary slug
							}
						}

						if(project.hasProperty("optional_dep_slugs")) {
							project.optional_dep_slugs.split(", ").each { String slug ->
								optionalDependency slug
							}
						}

						if(project.hasProperty("compatible_tool_slugs")) {
							project.compatible_tool_slugs.split(", ").each { String slug ->
								tool slug
							}
						}

						if(project.hasProperty("incompatible_slugs")) {
							project.incompatible_slugs.split(", ").each { String slug ->
								incompatible slug
							}
						}
					}
				}
			}

			afterEvaluate {
				uploadTask.dependsOn remapSourcesJar
			}
		}

		options {
			forgeGradleIntegration = false
		}
	}
}

apply from: 'project.gradle'
